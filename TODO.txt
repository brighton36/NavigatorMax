* Sketch out a home screen
  * Figure out how to relay the throttle and rudder to the vessel
  * Spice up the gps a bit with a smaller kalman-based turtle, and add the code we use for pathing. Maybe turn off the focal point
  * 3d view with a model? maybe just rotate it via a constant for now

* Implement the controllers and servos
  * These will belong in an emittors lib/folder

* This might be the way to do the IMU: 
  http://mbed.org/cookbook/IMU
  * Maybe http://www.x-io.co.uk/open-source-imu-and-ahrs-algorithms/
  * Look into a quaternion-based implementation that accepts compass?

* Clean up / refactor the spatial code a bit
  * What should we do about the gyro_to_euler, it'd be nice if we used eulers instead
    of dcm's internally...
  * The gyro might be backwards on one of the dimensions, test that out a bit 
  * I think we can better reflect the gyro than what we're doing with the plane-views
  * I think we need to adjust the frontend to use yaw, bank, pitch instead of roll and heading
  * Probably we should switch the front end to match the phidget lib with repsect to acceleration 
    vs accelerometer, and gyro instead of scope

* The cpu temps should be a different sensor - not an analog sensor
  * These may belong in a different tab, along with system voltages and the like
  * Let's not do anything here until we boot up the minnowboard

-- Test run!

* Perhaps we should do this for the 'production' mode, and switch to apache:
  * http://neovintage.blogspot.de/2012/02/precompile-static-html-pages-with-rails.html
  * https://developers.google.com/maps/documentation/staticmaps/#quick_example

* It'd be nice to add a spec to test for segfaults when the devices aren't connected...

* After testing....
  * GPS TODO:
    * Calculate true north, not mag north. Probably we just need to shell to : http://www.ngdc.noaa.gov/geomag/WMM/soft.shtml
  * GUI : On commloss should retry connection

* Down the line on the phidgets gem:
  Maybe....
  * Remove the type_info and replace with extended_attributes and polled_attributes
    basic attributes (these stay in the struct)
    extended_attributes (these are pointed to and are device specific)
    polled_attriubutes these are the running state variables

    It'd be nice if we alloc'd a struct during the poll interval, and passed that
    to a method for storage, this way we could implement our sequencing code down
    the line. However, I don't think this is practical without some fancy locking,
    as we could end up free'ing the struct before it's done in the ruby thread
  * It would then be nice to have a basic_attributes, extended_attributes, and 
    polled_attributes for each class



