* Do something nicer on the gps
  * Cache!
    * Move that httparty obj into a nicer lib somewhere
    * Implement a ?debug_render so that we can put pins down and not cache the render
    * We should also load our tiles a little more aggressively in the js - take a full circle around the requested tile
    * And write a preload rake task - and let it download ftl
  * Draw a nicer focus, and add pathing support

* Sketch out a home screen
  * With orientation, controller notations and our map at a zoom of 20?

* Fix the gyro in 3d
  * I think that we need to compute a vector from the deltas on a tick, and rotate
    the dcm by the angles of this vector on each axis

* Implement the controllers and servos
  * These will belong in an emittors lib/folder

* The cpu temps should be a different sensor - not an analog sensor
  * These may belong in a different tab, along with system voltages and the like
  * Let's not do anything here until we boot up the minnowboard

-- Test run!

* Perhaps we should do this for the 'production' mode, and switch to apache:
  * http://neovintage.blogspot.de/2012/02/precompile-static-html-pages-with-rails.html
  * https://developers.google.com/maps/documentation/staticmaps/#quick_example

* After testing....
  * GPS TODO:
    * Calculate true north, not mag north. Probably we just need to shell to : http://www.ngdc.noaa.gov/geomag/WMM/soft.shtml
  * GUI : On commloss should retry connection

* Down the line on the phidgets gem:
  Maybe....
  * Remove the type_info and replace with extended_attributes and polled_attributes
    basic attributes (these stay in the struct)
    extended_attributes (these are pointed to and are device specific)
    polled_attriubutes these are the running state variables

    It'd be nice if we alloc'd a struct during the poll interval, and passed that
    to a method for storage, this way we could implement our sequencing code down
    the line. However, I don't think this is practical without some fancy locking,
    as we could end up free'ing the struct before it's done in the ruby thread
  * It would then be nice to have a basic_attributes, extended_attributes, and 
    polled_attributes for each class



