#=require_tree ./lib
#=require_tree ./controllers
#=require_tree ./views

window.COLORS = { 
  # GPS: 
  gps_heading: 0xffa500,
  E_axis: 0x000000, N_axis: 0x000000,
  # System:
  cpu_system: 0x990033, cpu_user: 0x669900,
  process_system: 0x0033cc, process_user: 0x0099ff,
  # Spatial:
  x_axis: 0xff0000, y_axis: 0x00ff00, z_axis: 0x0000ff,
  acceleration: 0xcc00ff, compass: 0x20b2aa, gyroscope: 0xd2691e
}

on_route_change = (e) ->
  nav_pane = $.param.fragment()
  nav_pane = 'home' unless nav_pane
  
  $( 'li.active' ).removeClass( 'active' )
  $( '.nav_pane:visible' ).hide()

  $( 'a[href="#' + nav_pane + '"]' ).parent('li').addClass( 'active' )
  $("##{nav_pane}").show()

  window.active_controller = window.controllers[nav_pane]

$(document).ready -> 
  window.controllers = {
    'spatial-data-raw': new SpatialDataRawController
    'gps-location': new GpsLocation
    'system': new System
  }
  connection_status = new ConnectionStatusView '#connection_status'

  # This is our primitive router. Seems to work well enough:
  $(window).bind 'hashchange', on_route_change
  
  $(window).trigger( 'hashchange' )

  # Decorate our html a bit (mostly the legends):
  for label, color of COLORS
    $(".#{label}_legend_indicator").css('background-color', '#'+decimal_to_hex_string(color) )

  window.animate = ->
    requestAnimationFrame window.animate 
    connection_status.render()
    window.active_controller.render() if window.active_controller

  requestAnimationFrame window.animate 

  Socket = if ("MozWebSocket" in window) then MozWebSocket else WebSocket
  ws = new Socket "ws://localhost:8080/"
  ws.onmessage = (evt) ->
    data = $.parseJSON(evt.data)

    if data.request == 'get application_state'
      window.active_controller.tick(data) if window.active_controller
    else if data.request == 'get application_metadata'
      controller.set_metadata data for label, controller of window.controllers
        
  ws.onclose = -> 
    connection_status.is_connected false
  ws.onopen = ->
    connection_status.is_connected true
    ws.send 'get application_metadata'
    setInterval ( -> ws.send "get application_state" ), 1000/30
