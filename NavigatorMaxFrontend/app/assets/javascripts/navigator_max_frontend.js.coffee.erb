#=require_tree ./lib
#=require_tree ./controllers
#=require_tree ./views

window.COLORS = { 
  # GPS: 
  gps_heading: 0xffa500,
  E_axis: 0x000000, N_axis: 0x000000,
  # System:
  cpu_system: 0x990033, cpu_user: 0x669900,
  process_system: 0x0033cc, process_user: 0x0099ff,
  # Spatial:
  x_axis: 0xff0000, y_axis: 0x00ff00, z_axis: 0x0000ff,
  acceleration: 0xcc00ff, compass: 0x20b2aa, gyroscope: 0xd2691e
  # Analog Sensors:
  temperatures_cabin: 0x9c1c6b, temperatures_engine: 0xca278c, 
  temperatures_cpu: 0xe47297, voltages_interfacekit: 0x0099cc, voltages_minnow: 0x003399, 
  voltages_batteries: 0x66ccff, voltages_nicecolortodo: 0xccffcc,  # I Added that nicecolor for future use
  humidities_cabin: 0xff9900
}

window.ROBOT_MSG = {requestid: 'robot_command', robotid: 'NavigatorMax'}
window.OVERIDE_CONTROLS_MSG = $.extend({}, ROBOT_MSG, {commandid: 'overide_controls'})

window.WSCMD_GET_ATTRIBS = JSON.stringify $.extend({}, ROBOT_MSG, {commandid: 'attributes'})
window.WSCMD_GET_STATE = JSON.stringify $.extend({}, ROBOT_MSG, {commandid: 'state'})

on_route_change = (e) ->
  nav_pane = $.param.fragment()
  nav_pane = 'home' unless nav_pane
  
  $( 'li.active' ).removeClass( 'active' )
  $( '.nav_pane:visible' ).hide()

  $( 'a[href="#' + nav_pane + '"]' ).parent('li').addClass( 'active' )
  $("##{nav_pane}").show()

  window.active_controller = window.controllers[nav_pane]

$(document).ready -> 
  window.controllers = {
    'home': new HomeController,
    'mission': new MissionController,
    'spatial-data-raw': new SpatialDataRawController,
    'gps-location': new GpsLocationController,
    'system': new SystemController,
    'analog-sensors': new AnalogSensorsController
  }
  connection_status = new ConnectionStatusView '#connection_status'

  # This is our primitive router. Seems to work well enough:
  $(window).bind 'hashchange', on_route_change
  
  $(window).trigger( 'hashchange' )

  # Decorate our html a bit (mostly the legends):
  for label, color of COLORS
    $(".#{label}_legend_indicator").css('background-color', '#'+decimal_to_hex_string(color) )

  # If the browser supports it - create a (rudimentary) gamepad state tracker for 
  # us to poll in the animate loop
  if GamePad.is_supported()
    window.gamepads = new GamePad 
    gamepads.on_button_down 0, GamePad.BTN_YELLOW_Y, ->
      # Navigate to the first Main nav entry:
      $("ul.nav > li.clicknav:first > a")[0].click()
    gamepads.on_button_down 0, GamePad.BTN_GREEN_A, ->
      # Navigate to the last Main nav entry:
      $("ul.nav > li.clicknav:last > a")[0].click()
    gamepads.on_button_down 0, GamePad.BTN_RED_B, ->
      link = $("ul.nav > li.clicknav.active").next('li').find('a')
      link[0].click() if link.length > 0
    gamepads.on_button_down 0, GamePad.BTN_BLUE_X, ->
      link = $("ul.nav > li.clicknav.active").prev('li').find('a')
      link[0].click() if link.length > 0
  
  window.animate = ->
    requestAnimationFrame window.animate 
    window.gamepads.poll() if window.gamepads
    connection_status.render()
    window.active_controller.render() if window.active_controller

  requestAnimationFrame window.animate 

  window.socket_commands = {
    'state' : (data) -> 
      controller.tick data.result for label, controller of window.controllers
    'attributes' : (data) ->
      controller.set_metadata data.result for label, controller of window.controllers
  }

  Socket = if ("MozWebSocket" in window) then MozWebSocket else WebSocket
  window.ws = new Socket "ws://localhost:8023/commands"
  ws.onmessage = (evt) ->
    data = $.parseJSON(evt.data)

    if data.request.requestid == 'robot_command'
      if socket_commands.hasOwnProperty(data.request.commandid)
        socket_commands[data.request.commandid](data)
      else
        console.log "Unhandled WS Request:"
        console.log data.request
        
  ws.onclose = -> 
    connection_status.is_connected false
  ws.onopen = ->
    connection_status.is_connected true
    ws.send WSCMD_GET_ATTRIBS

    # State Polling:
    setInterval ( -> ws.send WSCMD_GET_STATE if connection_status.is_connected()), 1000/30

    # Overide Control reporting:
    setInterval -> 
      if window.gamepads? and window.gamepads.is_controller_available(0)
        # Axis 0 is left/right analog . -1.0 is left, 1.0 is right
        # Right trigger is a magnitude, between 0 and 1
        command_params = { commandid: 'overide_controls', command_params: [
          gamepads.axis(0, GamePad.AXIS_LEFT_X)[0], gamepads.right_trigger(0) ] }
        ws.send JSON.stringify($.extend({}, OVERIDE_CONTROLS_MSG, command_params))
    , 1000/8
