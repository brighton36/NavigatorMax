#=require_tree ./lib
#=require_tree ./controllers
#=require_tree ./views

window.COLORS = { 
  # GPS: 
  gps_heading: 0xffa500,
  E_axis: 0x000000, N_axis: 0x000000,
  # System:
  cpu_system: 0x990033, cpu_user: 0x669900,
  process_system: 0x0033cc, process_user: 0x0099ff,
  # Spatial:
  x_axis: 0xff0000, y_axis: 0x00ff00, z_axis: 0x0000ff,
  acceleration: 0xcc00ff, compass: 0x20b2aa, gyroscope: 0xd2691e
  # Analog Sensors:
  temperatures_cabin: 0x9c1c6b, temperatures_engine: 0xca278c, 
  temperatures_esc: 0xe47297, voltages_battery: 0x0099cc, voltages_esc: 0xccffcc, 
  voltages_engine: 0x66ccff, voltages_computer: 0x003399, 
  humidities_cabin: 0xff9900
}

on_route_change = (e) ->
  nav_pane = $.param.fragment()
  nav_pane = 'home' unless nav_pane
  
  $( 'li.active' ).removeClass( 'active' )
  $( '.nav_pane:visible' ).hide()

  $( 'a[href="#' + nav_pane + '"]' ).parent('li').addClass( 'active' )
  $("##{nav_pane}").show()

  window.active_controller = window.controllers[nav_pane]

$(document).ready -> 
  window.controllers = {
    'home': new HomeController,
    'spatial-data-raw': new SpatialDataRawController,
    'gps-location': new GpsLocationController,
    'system': new SystemController,
    'analog-sensors': new AnalogSensorsController
  }
  connection_status = new ConnectionStatusView '#connection_status'

  # This is our primitive router. Seems to work well enough:
  $(window).bind 'hashchange', on_route_change
  
  $(window).trigger( 'hashchange' )

  # Decorate our html a bit (mostly the legends):
  for label, color of COLORS
    $(".#{label}_legend_indicator").css('background-color', '#'+decimal_to_hex_string(color) )

  # If the browser supports it - create a (rudimentary) gamepad state tracker for 
  # us to poll in the animate loop
  if GamePad.is_supported()
    window.gamepads = new GamePad 
    gamepads.on_button_down 0, GamePad.BTN_YELLOW_Y, ->
      # Navigate to the first Main nav entry:
      $("ul.nav > li.clicknav:first > a")[0].click()
    gamepads.on_button_down 0, GamePad.BTN_GREEN_A, ->
      # Navigate to the last Main nav entry:
      $("ul.nav > li.clicknav:last > a")[0].click()
    gamepads.on_button_down 0, GamePad.BTN_RED_B, ->
      link = $("ul.nav > li.clicknav.active").next('li').find('a')
      link[0].click() if link.length > 0
    gamepads.on_button_down 0, GamePad.BTN_BLUE_X, ->
      link = $("ul.nav > li.clicknav.active").prev('li').find('a')
      link[0].click() if link.length > 0
  
  window.animate = ->
    requestAnimationFrame window.animate 
    window.gamepads.poll() if window.gamepads
    connection_status.render()
    window.active_controller.render() if window.active_controller

  requestAnimationFrame window.animate 

  Socket = if ("MozWebSocket" in window) then MozWebSocket else WebSocket
  ws = new Socket "ws://localhost:8080/"
  ws.onmessage = (evt) ->
    data = $.parseJSON(evt.data)

    if data.request == 'get application_state'
      controller.tick data for label, controller of window.controllers
    else if data.request == 'get application_metadata'
      controller.set_metadata data for label, controller of window.controllers
        
  ws.onclose = -> 
    connection_status.is_connected false
  ws.onopen = ->
    connection_status.is_connected true
    ws.send 'get application_metadata'
    setInterval ( -> ws.send "get application_state" ), 1000/30
    # TODO: Report this !
    #    console.log "Right Trigger:"+gamepads.right_trigger(0)
    #    console.log "Left Analog Axis Y:"+gamepads.axis(0, GamePad.AXIS_LEFT_Y)
