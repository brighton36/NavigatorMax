window.HomeController = class extends ThreedControllerHelpers
  constructor: ->
    super
    @gps_map = new GpsMapView $('#gps_zoomed_out')[0], 40.6892, -74.0447, { 
      zoom: 19,
      tile_source: (zoom, tx, ty) -> "/images/gmap-tiles-512/#{zoom}/#{tx}-#{ty}.png" }
    
    @orientation_cxt = $('#vessel_orientation_threed')[0].getContext( '2d' )

    @camera = new THREE.PerspectiveCamera( 30, @orientation_cxt.canvas.width / @orientation_cxt.canvas.height , 1, 10000 )
    @camera.position.z = 1000
    @camera.position.y = -1000
    @camera.position.x = 0

    @camera.lookAt(new THREE.Vector3(0,0,0))

    @scene = new THREE.Scene()

    # Debug elements:
    @debug_axis_length = 150
    @debug_axis_position = v(-400,-400,0)
    @debug_axis(@scene, @debug_axis_position, @debug_axis_length)
    @scene.add(@debug_plane(50,50,50,50))

    # The actual model
    @boat = new THREE.Mesh( @phidget_geometry( 200, 200, 50 ), 
      new THREE.MeshLambertMaterial( { color: 0xcc0000 } ) )
    @boat.position.z = 50
    @boat.useQuaternion = true

    @scene.add @boat

    # Lighting:
    @scene.add(new THREE.AmbientLight(0x888888))

    light = new THREE.DirectionalLight(0xffffff)
    light.position.set(500, 500, 500).normalize()
    @scene.add(light)
      
    @renderer = new THREE.CanvasRenderer(canvas: @orientation_cxt.canvas)
    @renderer.setSize @orientation_cxt.canvas.width, @orientation_cxt.canvas.height

  set_metadata: (data) -> 
    $('#home .title_annotation').html("TODO: figure out what's important here (power-on time?)")

  tick: (data) ->
    if data.gps?
      latlon = [data.gps.latitude, data.gps.longitude]
      @gps_map.focus latlon...
    if data.orientation?
      boat_quat = data.orientation.quaternion.orientation
      @boat.quaternion = new THREE.Quaternion(boat_quat[1], boat_quat[2], 
        boat_quat[3], boat_quat[0])

  render: ->
    @gps_map.render()

    @renderer.render @scene, @camera

    # Draw Debug axis labels
    draw_text(@orientation_cxt, @camera, '+x', @debug_axis_position.clone().add(v(@debug_axis_length*1.2, 0, 0)), COLORS.x_axis)
    draw_text(@orientation_cxt, @camera, '+y', @debug_axis_position.clone().add(v(0, @debug_axis_length*1.2, 0)), COLORS.y_axis)
    draw_text(@orientation_cxt, @camera, '+z', @debug_axis_position.clone().add(v(0, 0, @debug_axis_length*1.2)), COLORS.z_axis)
