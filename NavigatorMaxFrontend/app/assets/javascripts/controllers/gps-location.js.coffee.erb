window.GpsLocationController = class extends Controller
  MAX_PATH_LENGTH = 60

  constructor:  ->
    super
    @gps_table = new DataTableView '#gps_sensor'

    @orientation = new VectorPlot2D $("#heading_gps_vector")[0], 
      "Heading", 'E', 'N', COLORS

    @gps_map = new GpsMapView $('#gps_map')[0], 40.6892, -74.0447, { 
      tile_source: (zoom, tx, ty) -> "/images/gmap-tiles-512/#{zoom}/#{tx}-#{ty}.png" }

    @path = [] # This is merely a queue of where we've been
    @last_path_update_at = null

  set_metadata: (data) -> 
    if data.gps?
      attribs = data.gps
      $('#gps-location .title_annotation').html("#{attribs.name} (serial #{attribs.serial_number}) v.#{attribs.version}")
    
  tick: (data) ->
    if data.gps?
      latitude = if data.gps.latitude? then "#{data.gps.latitude.toFixed(14)}&deg;" else ''
      longitude = if data.gps.longitude? then "#{data.gps.longitude.toFixed(14)}&deg;" else ''
      altitude = if data.gps.altitude? then "#{data.gps.altitude} m" else ''
      heading = if data.gps.heading? then "#{data.gps.heading.toFixed(1)}&deg;" else ''
      velocity = if data.gps.velocity? then "#{data.gps.velocity.toFixed(4)} km/h" else ''

      if data.gps.latitude? and data.gps.longitude?
        latlon = [data.gps.latitude, data.gps.longitude]
        @gps_map.focus latlon...

        # We want to collect the location every second, and add it to the path:
        now = new Date().getTime()

        if (!@last_path_update_at?) or ((now - @last_path_update_at) > 1000)
          @last_path_update_at = now
          @path.unshift latlon
          @path.pop() if @path.length > MAX_PATH_LENGTH
          @gps_map.path @path

      @gps_table.set(property, value) for property, value of { 
        device_comm_rate: "#{data.gps.updates_per_second} hz", latitude: latitude, 
        longitude: longitude, altitude: altitude, heading: heading, 
        velocity: velocity, utc_time: data.gps.time,
        fixed: (if data.gps.is_fixed then 'Yes' else 'No') }

      heading_in_rad = data.gps.heading / 360 * 2*Math.PI

      @gps_map.direction heading_in_rad
      
      @orientation.plot( 'gps_heading', 
        new THREE.Vector2(Math.sin(heading_in_rad), Math.cos(heading_in_rad)) )

      #position = new google.maps.LatLng(data.gps.latitude, data.gps.longitude)
      #@marker.setPosition(position)
      #@google_map.panTo(position)

  render: ->
    @gps_table.render()
    @orientation.render()
    @gps_map.render()
