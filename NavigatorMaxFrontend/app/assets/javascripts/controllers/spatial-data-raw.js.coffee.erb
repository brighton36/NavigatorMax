window.SpatialDataRawController = class extends ThreedControllerHelpers
  constructor: () ->
    @spatial_cxt = $('#spatial_vectors_threed')[0].getContext( '2d' )

    @camera = new THREE.PerspectiveCamera( 30, @spatial_cxt.canvas.width / @spatial_cxt.canvas.height , 1, 10000 )
    @camera.position.z = 1000
    @camera.position.y = -1000
    @camera.position.x = 1000

    @camera.lookAt(new THREE.Vector3(0,0,0))
    @camera.rotation.z = 0.5

    @scene = new THREE.Scene()

    # Debug elements:
    @debug_axis_length = 150
    @debug_axis_position = v(-50,-600,0)
    @debug_axis(@scene, @debug_axis_position, @debug_axis_length)
    @scene.add(@debug_plane(50,50,50,50))

    # Accelerometer Arrow:
    @vector_arrows = {}

    for sensor in ['acceleration', 'compass', 'gyroscope']
      @vector_arrows[sensor] = new THREE.Mesh( @arrow_geometry(250),
        new THREE.MeshBasicMaterial( { color: COLORS[sensor]} ) )
      @scene.add(@vector_arrows[sensor])

    # The actual model
    @scene.add( new THREE.Mesh( @phidget_geometry( 200, 200, 50 ), 
      new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } ) ) )

    @renderer = new THREE.CanvasRenderer(canvas: @spatial_cxt.canvas)
    @renderer.setSize @spatial_cxt.canvas.width, @spatial_cxt.canvas.height

    @plane_vectors = {}
    for plane in [ 'xy', 'yz', 'xz' ]
      for type in ['vectors', 'gyro']
        label = "#{plane}_spatial_#{type}"
        @plane_vectors[label]= new VectorPlot2D $("##{label}")[0], 
          plane.toUpperCase().match(/./g).join('/')+" #{type}", plane[0], plane[1], 
          COLORS

    @data_tables = {
      orientation: 'euler_rotations', coords: 'sensor_values', runtime: 'runtime_stats',
      extents: 'sensor_minmax' }
    @data_tables[label] = new DataTableView("##{table}") for label, table of @data_tables


  set_metadata: (data) -> 
    attribs = data.orientation
    $('#spatial-data-raw .title_annotation').html("#{attribs.name} (serial #{attribs.serial_number}) v.#{attribs.version}")

    for sensor in ['acceleration', 'gyroscope', 'compass']
      for ext in ['min', 'max']
        @data_tables.extents.set "#{sensor}_#{ext}", attribs["#{sensor}_#{ext}"]
    @data_tables.extents.render()

  tick: (data) ->
    orientation = data.orientation
    if data.orientation
      @data_tables.runtime.set(property, value) for property, value of { 
        spatial_comm_rate: "#{orientation.updates_per_second}  hz",
        last_gui_poll: data.ts}

      for sensor in ['acceleration', 'gyroscope', 'compass']
        for i, coord of ['x', 'y', 'z']
          value = if orientation.raw[sensor]? and orientation.raw[sensor][i]?
            orientation.raw[sensor][i].toFixed(2)
          else
            ''
          @data_tables.coords.set "#{sensor}_#{coord}coord", value 

      # Update the 2d planes:
      if orientation.raw['acceleration']?
        norm_accel = new THREE.Vector3().fromArray( orientation.raw['acceleration'] ).normalize()
        @plane_vectors['xy_spatial_vectors'].plot( 'acceleration', new THREE.Vector2(norm_accel.x, norm_accel.y) )
        @plane_vectors['yz_spatial_vectors'].plot( 'acceleration', new THREE.Vector2(norm_accel.y, norm_accel.z) )
        @plane_vectors['xz_spatial_vectors'].plot( 'acceleration', new THREE.Vector2(norm_accel.x, norm_accel.z) )
      else
        @plane_vectors["#{plane}_spatial_vectors"].plot 'acceleration', null for plane in ['xy','yz','xz']

      # Update the 2d planes:
      if orientation.raw['compass']?
        norm_compass = new THREE.Vector3().fromArray( orientation.raw['compass'] ).normalize()
        @plane_vectors['xy_spatial_vectors'].plot( 'compass', new THREE.Vector2(norm_compass.x, norm_compass.y) )
        @plane_vectors['yz_spatial_vectors'].plot( 'compass', new THREE.Vector2(norm_compass.y, norm_compass.z) )
        @plane_vectors['xz_spatial_vectors'].plot( 'compass', new THREE.Vector2(norm_compass.x, norm_compass.z) )
      else
        @plane_vectors["#{plane}_spatial_vectors"].plot 'compass', null for plane in ['xy','yz','xz']

      # Update the 2d planes:
      if orientation.raw['gyroscope']?
        gyroscope = new THREE.Vector3().fromArray( 
          $(orientation.raw['gyroscope']).map( (i,n) -> n / 360 * Math.PI * 2  ) )
        @plane_vectors['xy_spatial_gyro'].plot( 'gyroscope', new THREE.Vector2(Math.sin(gyroscope.z), Math.cos(gyroscope.z)) )
        @plane_vectors['yz_spatial_gyro'].plot( 'gyroscope', new THREE.Vector2(Math.sin(gyroscope.x), Math.cos(gyroscope.x)) )
        @plane_vectors['xz_spatial_gyro'].plot( 'gyroscope', new THREE.Vector2(Math.sin(gyroscope.y), Math.cos(gyroscope.y)) )
      else
        @plane_vectors["#{plane}_spatial_vectors"].plot 'gyroscope', null for plane in ['xy','yz','xz']

      # Update the data table with euler angles:
      if orientation.euler_angles
        for sensor in ['acceleration','gyroscope', 'compass']
          for i, coord of ['heading','pitch','bank']
            value = if orientation.euler_angles[sensor]? and orientation.euler_angles[sensor][i]?
              orientation.euler_angles[sensor][i].toFixed(2)
            else
              ''
            @data_tables.orientation.set "#{sensor}_#{coord}", value 

      # Take the 3D arrow angles from the DCM:
      if orientation.direction_cosine_matrix?
        if orientation.direction_cosine_matrix['acceleration']?
          dcm_accel = orientation.direction_cosine_matrix['acceleration']
          @vector_arrows['acceleration'].visible = true
          @vector_arrows['acceleration'].matrix = new THREE.Matrix4()
          @vector_arrows['acceleration'].applyMatrix(new THREE.Matrix4( 
            dcm_accel[0][0], dcm_accel[0][1], dcm_accel[0][2], 0, 
            dcm_accel[1][0], dcm_accel[1][1], dcm_accel[1][2], 0, 
            dcm_accel[2][0], dcm_accel[2][1], dcm_accel[2][2], 0, 
            0, 0, 0, 1 ))
        else 
          @vector_arrows['acceleration'].visible = false
        
        if orientation.direction_cosine_matrix['compass']?
          dcm_compass = orientation.direction_cosine_matrix['compass']
          @vector_arrows['compass'].visible = true
          @vector_arrows['compass'].matrix = new THREE.Matrix4()
          @vector_arrows['compass'].applyMatrix(new THREE.Matrix4( 
            dcm_compass[0][0], dcm_compass[0][1], dcm_compass[0][2], 0, 
            dcm_compass[1][0], dcm_compass[1][1], dcm_compass[1][2], 0, 
            dcm_compass[2][0], dcm_compass[2][1], dcm_compass[2][2], 0, 
            0, 0, 0, 1 ))
        else
          @vector_arrows['compass'].visible = false

        if orientation.direction_cosine_matrix['gyroscope']?
          dcm_gyro = orientation.direction_cosine_matrix['gyroscope']
          @vector_arrows['gyroscope'].visible = true
          @vector_arrows['gyroscope'].matrix = new THREE.Matrix4()
          @vector_arrows['gyroscope'].applyMatrix(new THREE.Matrix4( 
            dcm_gyro[0][0], dcm_gyro[0][1], dcm_gyro[0][2], 0, 
            dcm_gyro[1][0], dcm_gyro[1][1], dcm_gyro[1][2], 0, 
            dcm_gyro[2][0], dcm_gyro[2][1], dcm_gyro[2][2], 0, 
            0, 0, 0, 1 ))
        else
          @vector_arrows['gyroscope'].visible = false

  render: ->
    @renderer.render @scene, @camera

    # Draw Debug axis labels
    draw_text(@spatial_cxt, @camera, '+x', @debug_axis_position.clone().add(v(@debug_axis_length*1.2, 0, 0)), COLORS.x_axis)
    draw_text(@spatial_cxt, @camera, '+y', @debug_axis_position.clone().add(v(0, @debug_axis_length*1.2, 0)), COLORS.y_axis)
    draw_text(@spatial_cxt, @camera, '+z', @debug_axis_position.clone().add(v(0, 0, @debug_axis_length*1.2)), COLORS.z_axis)

    # 2D Visualizations:
    plane.render() for label, plane of @plane_vectors
    table.render() for label, table of @data_tables
