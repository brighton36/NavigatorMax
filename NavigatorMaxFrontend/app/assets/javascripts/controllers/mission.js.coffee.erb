window.ModelAttribute = class
  constructor: (model, value) -> 
    @_model = model
    @_value = value
    @_persisted_value = null # TODO: this may need to be passed in the constructor so we know when we were loaded from db
    @_is_persisted = true
  set: (value) ->
    if @is_persisted()
      @_persisted_value = @_value
      @_mark_unpersisted()
    @_value = value
  value: -> @_value
  persisted_value: -> @_persisted_value
  is_persisted: -> @_is_persisted
  is_dirty: -> !@is_persisted()
  is_valid: -> 
    if @is_dirty()
      for own key, value of @_model
        return @_model.is_attribute_valid(key) if value is @
      return false # This shouldn't ever be the case
    else
      true
  _mark_unpersisted: -> @_is_persisted = false

window.Model = class
  @add: (model) ->
    @_models ?= []
    @_models.push model
  @find: (attrs) ->
    found = []
    for m in @_models
      if m?
        found.push m if @_all(attrs, (key, value) -> m[key].value() is value)
    found
  @find_first: (attrs) ->
    for m in @_models
      if m?
        return m if @_all(attrs, (key, value) -> m[key].value() is value)
    return nil
  @find_by_id: (id) -> @_models[parseInt(id)]
  @_all: (pairs, is_truth) ->
    for own key, value of pairs
      return false unless is_truth(key, value)
    return true
  id: ->
    i = 0
    for model in @constructor._models
      return i if model is @
      i++
    return null

  constructor: (attributes) ->
    @_attributes = []
    for own key, value of attributes
      @_attributes.push key
      @[key] = new ModelAttribute @, value 
    @constructor.add @
  is_valid: ->
    @_are_all_attributes (lbl, attr) -> attr.is_valid()
  is_dirty: ->
    @_is_any_attribute (lbl, attr) -> attr.is_dirty()
  is_persisted: -> !@is_dirty()

  save: ->
    console.log("TODO: save")
  destroy: ->
    console.log("TODO: destroy")
    @constructor._models[@id()] = null

  is_attribute_valid: (attr) ->
    if @_validations? and @_validations[attr]
      for against in @_validations[attr]
        return false unless against(@[attr].value()) 
    return true

  each_attribute: (against) ->
    against(key, @[key]) for key in @_attributes

  _are_all_attributes: (against) ->
    for key in @_attributes
      return false unless against(key, @[key]) 
    true
  _is_any_attribute: (against) ->
    for key in @_attributes
      return true if against(key, @[key]) 
    false
  _validate: (attr, against) ->
    @_validations ?= {}
    @_validations[attr] ?= []
    @_validations[attr].push against

window.MissionModel = class extends Model
  DEFAULT_ATTRIBUTES: {center_lat: 26.214726, center_lon: -80.168894, \
    title: "New Mission", zoom: 18, is_looping: false}
  VALID_TITLE = /^[a-z0-9\!\@\#\$\%\^\&\(\)\\\/\|\_\-\<\>\. ]+$/i
  VALID_ZOOM = /^([0-9]|1[0-9]|2[01])$/
  VALID_GPSCOORD = /^[\-]?[0-9]{1,3}\.[0-9]+$/

  constructor: (attributes) -> 
    super($.extend( {}, MissionModel::DEFAULT_ATTRIBUTES, \
      {created_at: new Date()}, attributes))
    @_validate 'title', (title) ->
      if ( MissionModel.find(title: title).length is 1 ) \
        and VALID_TITLE.exec(title) then true else false
    @_validate 'zoom', (zoom) ->
      if VALID_ZOOM.exec(zoom) then true else false
    @_validate 'center_lat', (center_lat) ->
      if VALID_GPSCOORD.exec(center_lat) then true else false
    @_validate 'center_lon', (center_lon) ->
      if VALID_GPSCOORD.exec(center_lon) then true else false
    @_validate 'is_looping', (is_looping) ->
      if (is_looping is true) or (is_looping is false) then true else false

  distance: -> 0
  run: ->
    console.log "TODO: Run!"

window.MissionEditorView = class
  DEFAULT_INPUT_ATTRS = {type: 'text', class: 'input-medium', value: ''}

  constructor: (options) ->
    @missions = []

    @select_missions_el = options.select_missions
    @select_missions_el.find('li>a').click @_on_form_mission_select if @select_missions_el.find('li>a')

    @save_mission_el = options.save_mission
    @delete_mission_el = options.delete_mission
    @run_mission_el = options.run_mission

    @save_mission_el.click @_on_form_save if @save_mission_el?
    @delete_mission_el.click @_on_form_delete if @delete_mission_el?
    @run_mission_el.click @_on_form_run if @run_mission_el?

    @form_container = $(options.form_container)

    # On select fires when a new mission is selected:
    @on_select => 
      @delete_mission_el.removeClass('disabled') if @delete_mission_el
      @_update_form_state()

    # On change fires if an input changes:
    @on_change => 
      @_update_form_state()
      @_update_selected_mission_option()

    @on_create =>
      # Register the Mission in the option drop-down:
      new_option_html = @_select_option @selected_mission.title.value(), @selected_mission.id()
      new_option = $(new_option_html).insertBefore @select_missions_el.find('ul li.divider')
      $(new_option).find('a').append @_option_asterisk()
      $(new_option).click @_on_form_mission_select

    @on_change_attr 'title', (old_title, new_title) =>
      # This will adjust the title in the drop-down select:
      mission_anc = @_find_mission_select_option(@selected_mission.id())
      $(mission_anc).html(new_title) if mission_anc?

  # This handles the star/unstarring of the mission in the select option, to indicate
  # persistance state
  _update_selected_mission_option: ->
    select_option_el = $(@_find_mission_select_option(@selected_mission.id()))
    if @selected_mission.is_persisted()
      select_option_el.find('i').remove()
    else
      if select_option_el.find('i').length is 0
        select_option_el.append('<i class="icon-asterisk"></i>' )

  # This handles the buttons and select option changes when the form state changes:
  # Keeps things dry to consolidate this for various events
  _update_form_state: ->
    # For any attribute, we need to disable save if the record is invalid
    if @save_mission_el?
      if @selected_mission.is_valid() and @selected_mission.is_dirty()
        @save_mission_el.removeClass('disabled')
      else
        @save_mission_el.addClass('disabled')

    if @run_mission_el
      if @selected_mission.is_persisted()
        @run_mission_el.removeClass('disabled')
      else
        @run_mission_el.addClass('disabled')

  select_mission: (mission) ->
    @selected_mission = mission

    @_form_input 'title', mission.title.value()
    @_form_input 'center_lat', mission.center_lat.value(), class: 'input-mini'
    @_form_input 'center_lon', mission.center_lon.value(), class: 'input-mini'
    @_form_input 'zoom', mission.zoom.value(), class: 'input-mini', \
      type: 'number', min: 0, max: 21
    @_form_input 'is_looping', 1, type: 'checkbox', \
      checked: if (mission.is_looping.value()) then 'checked' else ''

    @_form_value 'created_at', @_date_to_s(mission.created_at.value())
    @_form_value 'distance', "#{mission.distance()} Miles"
    
    # Highlight any errors on this record:
    @selected_mission.each_attribute (key, attr) =>
      td_el = @form_container.find(".#{key}")
      if attr.is_valid()
        $(td_el).removeClass('error')
      else
        $(td_el).addClass('error')

    # And focus to the first element:
    @form_container.find('input:first').focus() 

  on_change_attr: (attr, fire) ->
    @_on_change_attr ?= {}
    @_on_change_attr[attr] ?= []
    @_on_change_attr[attr].push fire
  on_dirty: (fire) ->
    @_on_dirty ?= []
    @_on_dirty.push fire
  on_create: (fire) ->
    @_on_create ?= []
    @_on_create.push fire
  on_select: (fire) ->
    @_on_select ?= []
    @_on_select.push fire
  on_change: (fire) ->
    @_on_change ?= []
    @_on_change.push fire

  _on_form_mission_select: (e) =>
    e.preventDefault()
    mission_anc = $(e.target)
    if mission_anc.html() is 'Create New'
      new_mission = new MissionModel 
      @missions.push new_mission
      @select_mission new_mission
      @_fire_event_chain(@_on_create)
    else 
      mission = MissionModel.find_by_id(mission_anc.attr('data-mission-id'))
      @select_mission mission if mission? 
    
    @_fire_event_chain(@_on_select)

  _on_form_save: (e) =>
    e.preventDefault()
    unless $(e.target).hasClass('disabled')
      @selected_mission.save()
      @save_mission_el.addClass('disabled') if @save_mission_el
      @_update_selected_mission_option()

  _on_form_run: (e) =>
    e.preventDefault()
    unless $(e.target).hasClass('disabled')
      # TODO: What the hell do we do in the gui?
      @selected_mission.run()
  _on_form_delete: (e) =>
    e.preventDefault()
    unless $(e.target).hasClass('disabled')
      mission_title = @selected_mission.title.value()
      if confirm("Are you sure you wish to delete \"#{mission_title}\"")
        mission_id = @selected_mission.id()
        @selected_mission.destroy()
        @selected_mission = null

        # Remove this mission from the option group:
        mission_el = @_find_mission_select_option mission_id
        $(mission_el).parent('li').remove()

        # And 'reset' the form to its defaults:
        # NOTE: This probably needs to have an event registered
        @form_container.find('td').html('<span class="muted">(None)</span>')
        for el in [@save_mission_el, @delete_mission_el, @run_mission_el]
          el.addClass('disabled')
  _on_form_input_change: (e) =>
    e.preventDefault()
    name_parts = /^[^\[]+\[(.*)\]$/.exec($(e.target).attr('name'))

    changed_attr = name_parts[1] if name_parts?
    if changed_attr? and @selected_mission.hasOwnProperty(changed_attr)
      record_was_dirty = @selected_mission.is_dirty()

      new_html_value = switch $(e.target).attr('type')
        when 'checkbox'
          $(e.target).attr('checked') == 'checked'
        else
          $(e.target).val()
      old_value = @selected_mission[changed_attr].value()

      @selected_mission[changed_attr].set(new_html_value)
      new_value = @selected_mission[changed_attr].value()

      el_parent = $(e.target).parent('td')

      if @selected_mission[changed_attr].is_valid()
        el_parent.removeClass('error')
      else 
        el_parent.addClass('error')
      
      if old_value isnt new_value
        @_fire_event_chain @_on_change
        @_fire_on_change_attr changed_attr, old_value, new_value

      @_fire_event_chain @_on_dirty if !record_was_dirty and @selected_mission[changed_attr].is_dirty()
  _find_mission_select_option: (mission_id) ->
    els = $("a[data-mission-id=\"#{mission_id}\"]") 
    if els.length is 1 then els[0] else null
  _date_to_s: (date) ->
    [date.getMonth()+1, date.getDate(), date.getFullYear()].join('/') + ' at ' + \
    [date.getHours(), date.getMinutes()].join(':') + ' EST'
  _form_input: (attr, value, attribs = {}) ->
    input_attrs = $.extend({}, attribs, {name:"mission[#{attr}]", value: value})
    td_html = @form_container.find(".#{attr}").html(@_input(input_attrs))
    td_html.find('input').change @_on_form_input_change
  _form_value: (attr, value) ->
    @form_container.find(".#{attr}").html(value)
  _input: (attribs = {}) ->
    elprops = $.extend({}, DEFAULT_INPUT_ATTRS, attribs)
    "<input "+$.map( elprops, (val,attr) -> "#{attr}=\"#{val}\"").join(' ')+" />"
  _select_option: (title, mission_id) ->
    "<li><a href=\"#\" tabindex=\"-1\" data-mission-id=\"#{mission_id}\">#{title}</a></li>"
  _option_asterisk: ->
    '<i class="icon-asterisk"></i>' 
  _fire_on_change_attr: (attr, old_value, new_value) ->
    if @_on_change_attr? and @_on_change_attr[attr]
      fire(old_value, new_value) for fire in @_on_change_attr[attr]
  _fire_event_chain: (chain) ->
    if chain?
      fire() for fire in chain

window.MissionController = class
  constructor:  ->
    default_attrs = MissionModel::DEFAULT_ATTRIBUTES

    @map = new GpsMapView $('#mission_map')[0], default_attrs.center_lat, 
      default_attrs.center_lon, { zoom: default_attrs.zoom, is_drawing_center: false,
      tile_source: (zoom, tx, ty) -> "/images/gmap-tiles-512/#{zoom}/#{tx}-#{ty}.png" }

    @dash_offset = 0;

    @editor = new MissionEditorView select_missions: $('#missions_dropdown'), \
      select_waypoints: $('#waypoints_dropdown li>a'), \
      save_mission: $('#save_mission'), \
      delete_mission: $('#delete_mission'), \
      run_mission: $('#run_mission'), \
      form_container: $('#mission_properties')

  set_metadata: (data) -> 

  tick: (data) ->

  render: ->
    @map.render()

    dashList = [12, 6]

    @dash_offset += 1

    @map.ctx.save()
    @map.ctx.beginPath()
    @map.ctx.setLineDash(dashList)
    @map.ctx.lineDashOffset = @dash_offset
    @map.ctx.moveTo(0,0)
    @map.ctx.lineTo(@map.ctx.canvas.width,@map.ctx.canvas.height)
    @map.ctx.lineWidth = 2.0
    @map.ctx.strokeStyle = 'ffffff'
    @map.ctx.stroke()
    @map.ctx.restore()
