window.ModelAttribute = class
  constructor: (model, value) -> 
    @_model = model
    @_value = value
    @_persisted_value = null # TODO: this may need to be passed in the constructor so we know when we were loaded from db
    @_is_persisted = true
  set: (value) ->
    if @is_persisted()
      @_persisted_value = @_value
      @_mark_unpersisted()
    @_value = value
  value: -> @_value
  persisted_value: -> @_persisted_value
  is_persisted: -> @_is_persisted
  is_dirty: -> @_persisted_value != @_value
  is_valid: -> 
    if @is_dirty()
      for own key, value of @_model
        return @_model.is_attribute_valid(key) if value is @
      return false # This shouldn't ever be the case
    else
      true
  _mark_unpersisted: -> @_is_persisted = false

window.Model = class
  @add: (model) ->
    @_models ?= []
    @_models.push model
  constructor: (attributes, klass) ->
    @attributes = {}
    @[key] = new ModelAttribute @, value for own key, value of attributes
    klass.add @, klass
  is_valid: ->
    @_are_all_attributes (lbl, attr) -> attr.is_valid()
  is_dirty: ->
    @_is_any_attribute (lbl, attr) -> attr.is_dirty()
  is_persisted: -> !@is_dirty()

  save: ->
    console.log("TODO: save")

  is_attribute_valid: (attr) ->
    if @_validations? and @_validations[attr]
      return false unless against() for against in @_validations[attr]
    return true

  _are_all_attributes: (against) ->
    return false unless against(key, attr) for own key, attr of @attributes
    true
  _is_any_attribute: (against) ->
    return true if against(key, attr) for own key, attr of @attributes
    false
  _validate: (attr, against) ->
    @_validations ?= {}
    @_validations[attr] ?= []
    @_validations[attr].push against

window.MissionModel = class extends Model
  DEFAULT_ATTRIBUTES: {center_lat: 26.214726, center_lon: -80.168894, \
    title: "New Mission", zoom: 18, is_looping: false}

  constructor: (attributes) -> 
    super($.extend( {}, MissionModel::DEFAULT_ATTRIBUTES, \
      {created_at: new Date()}, attributes), MissionModel)
    @_validate 'title', ->
      console.log "TODO: Perform a title uniqueness validation"
      true
    @_validate 'zoom', ->
      console.log "TODO: Perform a min/max validation"
      true
    @_validate 'center_lat', ->
      console.log "TODO: Perform a regex validation"
      true
    @_validate 'center_lon', ->
      console.log "TODO: Perform a regex validation"
      true
    @_validate 'is_looping', ->
      console.log "TODO: Perform a bool validation"
      true
  distance: -> 0

window.MissionEditorView = class
  DEFAULT_INPUT_ATTRS = {type: 'text', class: 'input-medium', value: ''}

  constructor: (options) ->
    @missions = []

    @select_missions_el = options.select_missions
    @select_missions_el.find('li>a').click @_on_mission_select if @select_missions_el.find('li>a')

    options.save_mission.click @_on_form_save if options.save_mission
    @form_container = $(options.form_container)

    @on_create =>
      console.log "TODO: create an entry in the drop-down"
      # TODO: If the record is dirty, set the dirty buttons

      # Register the Mission in the option drop-down:
      new_option_html = @_select_option @selected_mission.title.value()
      new_option = $(new_option_html).insertBefore @select_missions_el.find('ul li.divider')
      $(new_option).click @_on_mission_select
      
    @on_change 'title', (old_title, new_title) =>
      for a_el in @select_missions_el.find('li>a')
        if $(a_el).html() is old_title
          $(a_el).html(new_title)
          break

    @on_dirty =>
      console.log "TODO: Set the button conditions now that we're dirty"

  select_mission: (mission) ->
    # TODO: Maybe just an on_select?
    #  * if not persisted, and valid, then show the save button and hide run. Else, show run
    #  * Always show delete
    #  * Populate/activate the waypoint view?
    @selected_mission = mission

    @_form_input 'title', mission.title.value()
    @_form_input 'center_lat', mission.center_lat.value(), class: 'input-mini'
    @_form_input 'center_lon', mission.center_lon.value(), class: 'input-mini'
    @_form_input 'zoom', mission.zoom.value(), class: 'input-mini', type: 'number'
    @_form_input 'is_looping', 1, type: 'checkbox', \
      checked: if (mission.is_looping.value()) then 'checked' else ''

    @_form_value 'created_at', @_date_to_s(mission.created_at.value())
    @_form_value 'distance', "#{mission.distance()} Miles"

  on_change: (attr, fire) ->
    @_on_change ?= {}
    @_on_change[attr] ?= []
    @_on_change[attr].push fire

  on_dirty: (fire) ->
    @_on_dirty ?= []
    @_on_dirty.push fire

  on_create: (fire) ->
    @_on_create ?= []
    @_on_create.push fire

  _on_mission_select: (e) =>
    e.preventDefault()
    if $(e.target).html() is 'Create New'
      new_mission = new MissionModel 
      @missions.push new_mission
      @select_mission new_mission
      @_fire_on_create()
    else 
      # TODO: Populate the mission table
      console.log $(e.target).html()

  _on_form_save: (e) =>
    e.preventDefault()

  _on_form_input_change: (e) =>
    e.preventDefault()
    name_parts = /^[^\[]+\[(.*)\]$/.exec($(e.target).attr('name'))

    changed_attr = name_parts[1] if name_parts?
    if changed_attr? and @selected_mission.hasOwnProperty(changed_attr)
      record_was_dirty = @selected_mission.is_dirty()

      new_html_value = switch $(e.target).attr('type')
        when 'checkbox'
          $(e.target).attr('checked') == 'checked'
        else
          $(e.target).val()
      old_value = @selected_mission[changed_attr].value()

      @selected_mission[changed_attr].set(new_html_value)

      el_parent = $(e.target).parent('td')

      if @selected_mission[changed_attr].is_valid()
        el_parent.removeClass('error')
      else 
        el_parent.addClass('error')
        # This focus is a bit annoying, but in the case of say, a bad title, it 
        # keeps us from having to deal with the pop-up menus having 'bad titles'
        $(e.target).focus() 
      
      @_fire_on_change changed_attr, old_value, @selected_mission[changed_attr].value()

      @_fire_on_dirty() if !record_was_dirty and @selected_mission[changed_attr].is_dirty()

  _date_to_s: (date) ->
    [date.getMonth()+1, date.getDate(), date.getFullYear()].join('/') + ' at ' + \
    [date.getHours(), date.getMinutes()].join(':') + ' EST'

  _form_input: (attr, value, attribs = {}) ->
    input_attrs = $.extend({}, attribs, {name:"mission[#{attr}]", value: value})
    td_html = @form_container.find(".#{attr}").html(@_input(input_attrs))
    td_html.find('input').change @_on_form_input_change

  _form_value: (attr, value) ->
    @form_container.find(".#{attr}").html(value)
  _input: (attribs = {}) ->
    elprops = $.extend({}, DEFAULT_INPUT_ATTRS, attribs)
    "<input "+$.map( elprops, (val,attr) -> "#{attr}=\"#{val}\"").join(' ')+" />"
  _select_option: (title) ->
    "<li><a href=\"#\" tabindex=\"-1\">#{title}</a></li>"
  _fire_on_change: (attr, old_value, new_value) ->
    if @_on_change? and @_on_change[attr]
      fire(old_value, new_value) for fire in @_on_change[attr]

  _fire_on_dirty: ->
    if @_on_dirty?
      fire() for fire in @_on_dirty

  _fire_on_create: ->
    if @_on_create?
      fire() for fire in @_on_create

window.MissionController = class
  constructor:  ->
    default_attrs = MissionModel::DEFAULT_ATTRIBUTES

    @map = new GpsMapView $('#mission_map')[0], default_attrs.center_lat, 
      default_attrs.center_lon, { zoom: default_attrs.zoom, is_drawing_center: false,
      tile_source: (zoom, tx, ty) -> "/images/gmap-tiles-512/#{zoom}/#{tx}-#{ty}.png" }

    @dash_offset = 0;

    @editor = new MissionEditorView select_missions: $('#missions_dropdown'), \
      select_waypoints: $('#waypoints_dropdown li>a'), \
      save_mission: $('#save_mission'), \
      delete_mission: $('#delete_mission'), \
      run_mission: $('#run_mission'), \
      form_container: $('#mission_properties')

  tick: (data) ->

  render: ->
    @map.render()

    dashList = [12, 6]

    @dash_offset += 1

    @map.ctx.save()
    @map.ctx.beginPath()
    @map.ctx.setLineDash(dashList)
    @map.ctx.lineDashOffset = @dash_offset
    @map.ctx.moveTo(0,0)
    @map.ctx.lineTo(@map.ctx.canvas.width,@map.ctx.canvas.height)
    @map.ctx.lineWidth = 2.0
    @map.ctx.strokeStyle = 'ffffff'
    @map.ctx.stroke()
    @map.ctx.restore()
