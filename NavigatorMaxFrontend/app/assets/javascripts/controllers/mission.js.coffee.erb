window.WaypointEditorView = class
  constructor: (attributes) ->
    console.log "TODO: init waypoints"
    # TODO: Register changes with the mission control
    # Also - use the mission control's selected mission for our state persistence

window.MissionModel = class extends Model
  DEFAULT_ATTRIBUTES: {center_lat: 26.214726, center_lon: -80.168894, \
    title: "New Mission", zoom: 18, is_looping: false}
  VALID_TITLE = /^[a-z0-9\!\@\#\$\%\^\&\(\)\\\/\|\_\-\<\>\. ]+$/i
  VALID_ZOOM = /^([0-9]|1[0-9]|2[01])$/
  VALID_GPSCOORD = /^[\-]?[0-9]{1,3}\.[0-9]+$/

  constructor: (attributes) -> 
    super($.extend( {}, MissionModel::DEFAULT_ATTRIBUTES, \
      {created_at: new Date()}, attributes))
    @_validate 'title', (title) ->
      if ( MissionModel.find(title: title).length is 1 ) \
        and VALID_TITLE.exec(title) then true else false
    @_validate 'zoom', (zoom) ->
      if VALID_ZOOM.exec(zoom) then true else false
    @_validate 'center_lat', (center_lat) ->
      if VALID_GPSCOORD.exec(center_lat) then true else false
    @_validate 'center_lon', (center_lon) ->
      if VALID_GPSCOORD.exec(center_lon) then true else false
    @_validate 'is_looping', (is_looping) ->
      if (is_looping is true) or (is_looping is false) then true else false
  save: ->
    window.ws.send JSON.stringify(@_save_command())
    super
  destroy: ->
    console.log "TODO: Inside here destroy"
    super

  distance: -> 0

  run: ->
    console.log "TODO: Run!"

  _save_command: ->
    $.extend({}, window.ROBOT_MSG, {commandid: 'save_mission', command_params: [ @to_json() ]})

window.MissionController = class extends Controller
  WSCMD_LOAD_MISSIONS = JSON.stringify $.extend({}, window.ROBOT_MSG, {commandid: 'missions'})

  constructor:  ->
    super
    default_attrs = MissionModel::DEFAULT_ATTRIBUTES

    @map = new GpsMapView $('#mission_map')[0], default_attrs.center_lat, 
      default_attrs.center_lon, { zoom: default_attrs.zoom, is_drawing_center: false,
      tile_source: (zoom, tx, ty) -> "/images/gmap-tiles-512/#{zoom}/#{tx}-#{ty}.png" }

    @mission_edit = new MissionEditorView select_missions: $('#missions_dropdown'), \
      delete_mission: $('#delete_mission'), \
      save_mission: $('#save_mission'), \
      run_mission: $('#run_mission'), \
      form_container: $('#mission_properties')
    @waypoint_edit = new WaypointEditorView mission_view: @mission_edit, \
      select_waypoints: $('#waypoints_dropdown li>a'), \
      delete_waypoint: $('#delete_waypoint'), \
      form_container: $('#waypoint_properties')

    @dash_offset = 0;

    # Socket Init and Mission load:
    # TODO : window.ws.send WSCMD_LOAD_MISSIONS if window.connection_status.is_connected()

  on_socket: (data) ->
    # We Handle this ourselves
    switch data.request.commandid
      when 'save_mission'
        console.log "Save Completed. TODO: Fire the @mission_edit->save_complete?"
      when 'missions'
        console.log "TODO: Mission load time!"


  render: ->
    @map.render()

    dashList = [12, 6]

    @dash_offset += 1

    @map.ctx.save()
    @map.ctx.beginPath()
    @map.ctx.setLineDash(dashList)
    @map.ctx.lineDashOffset = @dash_offset
    @map.ctx.moveTo(0,0)
    @map.ctx.lineTo(@map.ctx.canvas.width,@map.ctx.canvas.height)
    @map.ctx.lineWidth = 2.0
    @map.ctx.strokeStyle = 'ffffff'
    @map.ctx.stroke()
    @map.ctx.restore()
