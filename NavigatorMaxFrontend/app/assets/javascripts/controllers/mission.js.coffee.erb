window.MissionModel = class extends Model
  DEFAULT_ATTRIBUTES: {center_lat: 26.214726, center_lon: -80.168894, \
    title: "New Mission", zoom: 18, is_looping: false, waypoints: []}
  VALID_TITLE = /^[a-z0-9\!\@\#\$\%\^\&\(\)\\\/\|\_\-\<\>\. ]+$/i
  VALID_ZOOM = /^([0-9]|1[0-9]|2[01])$/
  VALID_GPSCOORD = /^[\-]?[0-9]{1,3}\.[0-9]+$/

  constructor: (attributes = {}, is_persisted = false) -> 
    if attributes.hasOwnProperty 'created_at'
      attributes.created_at = new Date attributes.created_at
    else
      attributes.created_at = new Date()

    super $.extend( {}, MissionModel::DEFAULT_ATTRIBUTES, attributes), is_persisted

    @_validate 'title', (title) ->
      if ( MissionModel.find(title: title).length is 1 ) \
        and VALID_TITLE.exec(title) then true else false
    @_validate 'zoom', (zoom) ->
      if VALID_ZOOM.exec(zoom) then true else false
    @_validate 'center_lat', (center_lat) ->
      if VALID_GPSCOORD.exec(center_lat) then true else false
    @_validate 'center_lon', (center_lon) ->
      if VALID_GPSCOORD.exec(center_lon) then true else false
    @_validate 'is_looping', (is_looping) ->
      if (is_looping is true) or (is_looping is false) then true else false

  distance: -> 0

  run: ->
    console.log "TODO: Run!"

  save: ->
    @_send_command 'save_mission', @to_json()
    super
  destroy: ->
    @_send_command 'destroy_mission', @id()
    super
  _send_command: (command, params...) ->
    window.ws.send JSON.stringify( $.extend({}, window.ROBOT_MSG, \ 
      {commandid: command, command_params: params }) )

window.MissionController = class extends Controller
  MISSIONS_MSG = {requestid: 'robot_command', robotid: 'NavigatorMax', commandid: 'missions'}

  constructor:  ->
    super
    default_attrs = MissionModel::DEFAULT_ATTRIBUTES

    @map = new GpsMapView $('#mission_map')[0], default_attrs.center_lat, 
      default_attrs.center_lon, { zoom: default_attrs.zoom, is_drawing_center: false,
      tile_source: (zoom, tx, ty) -> "/images/gmap-tiles-512/#{zoom}/#{tx}-#{ty}.png" }

    @mission_edit = new MissionEditorView select_missions: $('#missions_dropdown'), \
      delete_mission: $('#delete_mission'), \
      save_mission: $('#save_mission'), \
      run_mission: $('#run_mission'), \
      form_container: $('#mission_properties')
    @waypoint_edit = new WaypointEditorView mission_view: @mission_edit, \
      map_view: @map, \
      select_waypoints: $('#waypoints_dropdown'), \
      delete_waypoint: $('#delete_waypoint'), \
      form_container: $('#waypoint_properties')

    @dash_offset = 0;

  on_connect: (ws) -> ws.send JSON.stringify MISSIONS_MSG

  on_message: (data) ->
    # We Handle this ourselves
    switch data.request.commandid
      when 'save_mission'
        @mission_edit.save_complete()
      when 'destroy_mission'
        @mission_edit.destroy_complete()
      when 'missions'
        new MissionModel attributes, true for id, attributes of data.result
        @mission_edit.missions_updated()

  _dotted_line: (ctx, color, offset, segments) ->
    dashList = [12, 6]
    ctx.save()
    ctx.beginPath()
    ctx.setLineDash(dashList)
    ctx.lineDashOffset = offset
    ctx.lineWidth = 2.0
    ctx.strokeStyle = color
    ctx.moveTo(segments[0]...)
    for coords,i in segments
      ctx.lineTo(coords...) if i > 0
    ctx.stroke()
    ctx.restore()
    
  render: ->
    @map.render()

    mission = @mission_edit.selected_mission
    waypoint_index = @waypoint_edit.selected_index

    if mission?
      # Let's translate the latlons into canvas coords:
      wp_coords = []
      for wp in mission.waypoints.value()
        wp_coords.push @map.latlon_to_canvas(wp.lat, wp.lon) if wp.lat? and wp.lon?

      # Connect a line between each waypoint:
      if wp_coords.length > 1
        @dash_offset -= 0.5

        is_drawing_loop = (wp_coords.length > 2 and mission.is_looping.value())

        if waypoint_index?
          segments_prior = []
          segment_selected = null
          segments_after = null
          if waypoint_index is 0 and wp_coords[waypoint_index].lat? and wp_coords[waypoint_index].lon?
            for i in [0..wp_coords.length-1] by 1
              segments_prior.push wp_coords[i]

            if is_drawing_loop
              segment_selected = [ wp_coords[wp_coords.length-1], wp_coords[0] ]
          else
            segments_after = []
            for i in [0..waypoint_index-1] by 1
              segments_prior.push wp_coords[i]

            for i in [waypoint_index..wp_coords.length-1] by 1
              segments_after.push wp_coords[i] 
            segments_after.push wp_coords[0] if is_drawing_loop
            segment_selected = [wp_coords[waypoint_index-1], wp_coords[waypoint_index]]

          if segments_after?
            @_dotted_line @map.ctx, 'white', @dash_offset, segments_after
          if segment_selected?
            @_dotted_line @map.ctx, 'deeppink', @dash_offset, segment_selected 
          @_dotted_line @map.ctx, 'white', @dash_offset, segments_prior
        else
          segments = wp_coords.slice(0)
          segments.push wp_coords[0] if is_drawing_loop
          @_dotted_line @map.ctx, 'white', @dash_offset, segments

        # TODO: index 0 should calculate the length of the loop segment

      # Now circle the points:
      for coord,j in wp_coords
        color = (if j is waypoint_index then 'deeppink' else 'white')
        @map._circle(5, color, coord...)
        @map.ctx.save()
        @map.ctx.fillStyle = color
        @map.ctx.font = "bold 16px Arial"
        @map.ctx.fillText(j, coord[0]+10, coord[1]-5)
        @map.ctx.restore()

